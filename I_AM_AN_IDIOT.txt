// pokušavao sam se povezati na firebaseov firestore, bez da sam prije toga složio kolekcije i bazu na cloudu...oopsie

<template>
    <div>
      <h2>Word List</h2>
      <form @submit.prevent="addWord">
        <input type="text" v-model="newWord" placeholder="Enter a new word" required>
        <button type="submit">Add Word</button>
      </form>
  
      <ul>
        <li v-for="(word, index) in words" :key="index">
          {{ word }}
          <button @click="editWord(index)">Edit</button>
          <button @click="deleteWord(index)">Delete</button>
        </li>
      </ul>
    </div>
  </template>
  
  <script>
  import { ref } from 'vue';
//  import db from '../firebase/firebase'; 
// import db from '@/firebase/firebase';
// import db from '../../firebase/firebase';

  
  export default {
    name: 'WordList',
    setup() {
      const newWord = ref('');
      const words = ref([]);
  
      const addWord = async () => {
        if (newWord.value.trim() !== '') {
          try {
            await db.collection('words').add({
              word: newWord.value.trim()
            });
            newWord.value = ''; 
          } catch (error) {
            console.error('Error adding word:', error);
          }
        }
      };
  
      const editWord = async (index) => {
        const editedWord = prompt('Enter the edited word:', words.value[index]);
        if (editedWord && editedWord.trim() !== '') {
          try {
            await db.collection('words').doc(words.value[index].id).update({
              word: editedWord.trim()
            });
          } catch (error) {
            console.error('Error editing word:', error);
          }
        }
      };
  
      const deleteWord = async (index) => {
        if (confirm('Are you sure you want to delete this word?')) {
          try {
            await db.collection('words').doc(words.value[index].id).delete();
          } catch (error) {
            console.error('Error deleting word:', error);
          }
        }
      };
  
      db.collection('words').onSnapshot(snapshot => {
        words.value = snapshot.docs.map(doc => ({
          id: doc.id,
          ...doc.data()
        }));
      });
  
      return {
        newWord,
        words,
        addWord,
        editWord,
        deleteWord
      };
    }
  };
  </script>
  
